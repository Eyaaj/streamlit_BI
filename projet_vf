import streamlit as st 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pydeck as pdk
import folium
from folium.plugins import MarkerCluster
import plotly.express as px
from PIL import Image
import urllib.request
import plotly.graph_objects as go
import json
import requests
import geopandas as gpd
image = Image.open('34921.jpg')
st.image(image)

# Ajout du paragraphe "Pr√©sentation" dans le corps de la page
st.subheader("Pr√©sentation")
st.write("*Vous souhaitez conna√Ætre la consommation d‚Äô√©nergie et/ou de gaz sur diff√©rents p√©rim√®tres g√©ographiques en France ?*")
st.write("L'utilisation de cette datavisualisation vous permettera une meilleure visualisation  de la consommation de gaz et/ou d'√©lectricit√© ainsi que le nombre de points de livraison par secteur d'activit√©s (industrie, tertiaire, r√©sidentiel, agriculture) sur le p√©rim√®tre g√©ographique s√©lectionn√©.")


# Chargement du tableau
url = "https://www.data.gouv.fr/fr/datasets/r/d33eabc9-e2fd-4787-83e5-a5fcfb5af66d"

try:
    # V√©rifier si l'URL est disponible
    urllib.request.urlopen(url)
    # Si l'URL est disponible, charger le contenu du fichier csv
    df = pd.read_csv(url)
except:
    # Si l'URL n'est pas disponible, charger le contenu du fichier local
    df = pd.read_csv("conso-elec-gaz-annuelle-par-naf-agregee-region.csv",sep=";", encoding='latin-1')


df['libelle_categorie_consommation'] = df['libelle_categorie_consommation'].replace('0', 'categorie inconnu')
# Convertir les valeurs de la colonne 'annee' en format 'YYYY'
df['annee'] = df['annee'].astype(str).str[:4]

# Convertir la colonne 'annee' en type datetime
df['annee'] = pd.to_datetime(df['annee'], format='%Y')

# Changer le format de la colonne 'annee' en ann√©e (YYYY)
df['annee'] = df['annee'].dt.strftime('%Y')
st.dataframe(df)


# Cr√©ation d'un sous-dataframe pour le nombre d'op√©rateurs par fili√®re
df_operateurs = df.groupby(['filiere'])['operateur'].nunique().reset_index()


# Cr√©ation du graphique camembert
fig2 = go.Figure(data=[go.Pie(labels=df_operateurs['filiere'], values=df_operateurs['operateur'])])
fig2.update_layout(title='Nombre d\'op√©rateurs par fili√®re')

# Regroupement des donn√©es par r√©gion et calcul de la consommation totale
df_conso_region = df.groupby("libelle_region")["conso"].sum()

# Obtenir les cinq r√©gions les plus consommatrices
top_regions = df_conso_region.nlargest(5).index.tolist()

# Filtrer le DataFrame pour inclure uniquement les cinq r√©gions les plus consommatrices
df_top_regions = df[df["libelle_region"].isin(top_regions)]

# Calculer la consommation totale par r√©gion pour les cinq r√©gions les plus consommatrices
df_conso_top_regions = df_top_regions.groupby("libelle_region")["conso"].sum()

# Cr√©er l'histogramme avec des couleurs diff√©rentes pour chaque barre
fig3, ax = plt.subplots()
ax.bar(df_conso_top_regions.index, df_conso_top_regions.values, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'])

# Espacer l'axe des abscisses
plt.subplots_adjust(bottom=0.2)

# Ajouter des √©tiquettes et des titres
plt.title("Consommation totale par r√©gion (Top 5)")
plt.xlabel("R√©gion")
plt.ylabel("Consommation totale (kWh)")
# Faire pivoter les noms des axes des abscisses
plt.xticks(rotation=90)

# Afficher le graphique camembert avec un titre distinct
st.subheader("Graphique Camembert : Nombre d'op√©rateurs par fili√®re")
st.plotly_chart(fig2)

# Afficher l'histogramme avec un titre distinct
st.subheader("Graphique Histogramme : Consommation totale par r√©gion (Top 5)")
st.pyplot(fig3)



# Options de visualisation
options = ["Histogramme", "Camembert"]
selected_option = st.selectbox("Choisissez une option de visualisation", options)

if selected_option == "Histogramme":
    # Filtrer les donn√©es pour l'√©nergie et le gaz
    df_energie = df[df["filiere"] == "Electricit√©"]
    df_gaz = df[df["filiere"] == "Gaz"]

    # Couleurs
    couleur_energie = "orange"
    couleur_gaz = "blue"

    # Cr√©er la figure
    fig = go.Figure()
    fig.add_trace(go.Bar(x=df_energie["annee"], y=df_energie["conso"], name="√âlectricit√©", marker=dict(color=couleur_energie)))
    fig.add_trace(go.Bar(x=df_gaz["annee"], y=df_gaz["conso"], name="Gaz", marker=dict(color=couleur_gaz)))
    fig.update_layout(title="Consommation d'√©nergie et de gaz au fil des ann√©es - Histogramme", xaxis_title="Ann√©e", yaxis_title="Consommation")

elif selected_option == "Camembert":
    # Filtrer les donn√©es pour l'√©nergie et le gaz
    df_energie = df[df["filiere"] == "Electricit√©"]
    df_gaz = df[df["filiere"] == "Gaz"]

    # Couleurs
    couleur_energie = "orange"
    couleur_gaz = "blue"

    total_energie = df_energie["conso"].sum()
    total_gaz = df_gaz["conso"].sum()

    fig = go.Figure(data=[go.Pie(labels=["√âlectricit√©", "Gaz"], values=[total_energie, total_gaz],
                                marker=dict(colors=[couleur_energie, couleur_gaz]))])
    fig.update_layout(title="R√©partition de la consommation d'√©nergie et de gaz", showlegend=False)
st.plotly_chart(fig)



import streamlit.components.v1 as components

# Ajouter la question pour approfondir l'analyse dans la barre lat√©rale

approfondir_analyse = st.radio("Souhaitez-vous approfondir l'analyse en vous focalisant sur les diff√©rentes r√©gions de la France ?", ("Oui", "Non"), index=1)
if approfondir_analyse == "Oui":
    # Ajout du titre dans le menu de gauche
    st.sidebar.title("Consommations locales d‚ÄôEnergie et de Gaz üí° ")

    # Filtrer les donn√©es
    selected_annee = st.sidebar.selectbox("Filtrer par ann√©e", df['annee'].unique())
    filtered_df = df[df['annee'] == selected_annee]
    selected_filiere = st.sidebar.selectbox("Filtrer par fili√®re", df['filiere'].unique())
    selected_grand_secteur = st.sidebar.selectbox("Filtrer par grand secteur", df['libelle_grand_secteur'].unique())
    selected_region = st.sidebar.selectbox("Filtrer par r√©gion", df['libelle_region'].unique())

    # Croisement entre "libelle_grand_secteur" et "pdl"
    sector_pdl_counts = filtered_df.groupby("libelle_grand_secteur")['pdl'].count().reset_index()
    sector_pdl_counts = sector_pdl_counts.rename(columns={'pdl': 'Nombre de points de livraison'})

    # Identifier les secteurs d'activit√© avec le plus grand nombre de points de livraison
    top_sectors = sector_pdl_counts.nlargest(5, 'Nombre de points de livraison')

    # Affichage du tableau r√©capitulatif des secteurs avec le plus grand nombre de points de livraison
    st.write("Secteurs d'activit√© avec le plus grand nombre de points de livraison :")
    st.table(top_sectors)

    # Cr√©ation du graphique √† barres pour la r√©partition des points de livraison par grand secteur d'activit√©
    fig_bar = px.bar(sector_pdl_counts, x='libelle_grand_secteur', y='Nombre de points de livraison',
                     labels={'libelle_grand_secteur': 'Grand secteur d\'activit√©',
                             'Nombre de points de livraison': 'Nombre de points de livraison'},
                     title='R√©partition des points de livraison par grand secteur d\'activit√©')

    # Affichage du graphique √† barres dans Streamlit
    st.plotly_chart(fig_bar)

    # Croisement entre "filiere" et "conso"
    filiere_conso_mean = filtered_df[filtered_df['libelle_grand_secteur'] == selected_grand_secteur].groupby("filiere")['conso'].mean().reset_index()
    filiere_conso_mean = filiere_conso_mean.rename(columns={'conso': 'Consommation moyenne'})

    # Affichage en gras de la phrase
    st.markdown("**Comparaison des niveaux de consommation entre les diff√©rentes fili√®res :**")

    # Cr√©ation des images pour les fili√®res
    electricite_img = Image.open("bulb.png")
    gaz_img = Image.open("gas.png")

    # Affichage des moyennes de consommation et des images pour les fili√®res
    col1, col2 = st.columns(2)
    with col1:
        st.image(electricite_img, caption="Electricit√©", width=50, use_column_width=True)
        st.write("**Consommation moyenne :**", round(filiere_conso_mean[filiere_conso_mean['filiere'] == "Electricit√©"]['Consommation moyenne'].values[0], 2))
        pdl_counts_energie = filtered_df[filtered_df['filiere'] == 'Electricit√©']['pdl'].groupby(filtered_df['annee']).count()
        st.write("**Nombre de points de livraison :**")
        st.write(pdl_counts_energie)

    with col2:
        st.image(gaz_img, caption="Gaz", width=50, use_column_width=True)
        st.write("**Consommation moyenne :**", round(filiere_conso_mean[filiere_conso_mean['filiere'] == "Gaz"]['Consommation moyenne'].values[0], 2))
        pdl_counts_gaz = filtered_df[filtered_df['filiere'] == 'Gaz']['pdl'].groupby(filtered_df['annee']).count()
        st.write("**Nombre de points de livraison :**")
        st.write(pdl_counts_gaz)


else:
    # Afficher un message de remerciement
    st.write("Merci d'avoir utilis√© l'application. √Ä bient√¥t!")


# Calculer le nombre de PDL par ann√©e pour chaque fili√®re
pdl_counts = df.groupby(['annee', 'filiere'])['pdl'].count().reset_index()

# Cr√©er le graphique √† ligne pour l'√©volution des PDL par ann√©e
fig = px.line(pdl_counts, x='annee', y='pdl', color='filiere',
              labels={'annee': 'Ann√©e', 'pdl': 'Nombre de points de livraison'},
              title='√âvolution du nombre de points de livraison (PDL) par ann√©e')

# Afficher le graphique dans Streamlit
st.plotly_chart(fig)

#Pour analyser et comprendre l'augmentation du nombre de pdl en 2018 il faut chercher qu'elle est le secteur le plus toucher car les raisons de cette expansion sotn multiples (Urbanisation et d√©veloppement :  construction de nouveaux b√¢timents, infrastructures et zones r√©sidentielles ou commerciales n√©cessitant des raccordements aux r√©seaux √©nerg√©tiques/ Politiques √©nerg√©tiques : Les politiques √©nerg√©tiques ou les incitations gouvernementales mises en place √† partir de 2018 peuvent avoir encourag√© l'installation de compteurs individuels dans les b√¢timents, entra√Ænant ainsi une augmentation du nombre de PDL / Changements de consommation...)


# Filtrer les donn√©es par grand secteur
filtered_df = df[df['libelle_grand_secteur'] == selected_grand_secteur]

# Filtrer les donn√©es par fili√®re
filtered_df = filtered_df[filtered_df['filiere'] == selected_filiere]

# Groupement par ann√©e et comptage des PDL
pdl_counts = filtered_df.groupby(['annee'])['pdl'].count().reset_index()

# Cr√©ation de la courbe d'√©volution des PDL
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(pdl_counts['annee'], pdl_counts['pdl'], marker='o')

# Configuration de l'axe des x et y
ax.set_xlabel('Ann√©e')
ax.set_ylabel('Nombre de points de livraison')
ax.set_title('√âvolution du nombre de points de livraison')

# Affichage du graphique dans Streamlit
st.pyplot(fig)


#explication 
st.markdown('### Notes')
st.write("point de livraison (PDL) : Point o√π est compt√©e la quantit√© d'√©nergie livr√©e √† un client consommateur ou √† un client distributeur. Le PDL n‚Äôest pas un ouvrage physique mais une r√©f√©rence g√©ographique, attribu√©e par le gestionnaire de r√©seau, pour d√©signer de fa√ßon unique le point o√π un utilisateur peut soutirer ou injecter de l'√©lectricit√©.")


# Lien vers LinkedIn
linkedin_url = 'https://www.linkedin.com/in/eya-jamoussi-98b3371b1'

# Lien vers GitHub
github_url = 'https://github.com/Eyaaj'

# Afficher les liens
st.markdown('### Liens utiles')
st.markdown(f'- [LinkedIn]({linkedin_url})')
st.markdown(f'- [GitHub]({github_url})')
